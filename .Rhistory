been_VBN settled_VBN in_IN Sussex_NNP ._."
txt.to.words(tagged.text, splitting.rule = "([A-Za-z,.;!])|[ \n\t]")
tagged.text = "The_DT family_NN of_IN Dashwood_NNP had_VBD long_RB
been_VBN settled_VBN in_IN Sussex_NNP ._."
txt.to.words(tagged.text, splitting.rule = "([A-Za-z,.;!]+ )|[ \n\t]")
tagged.text = "The_DT family_NN of_IN Dashwood_NNP had_VBD long_RB
been_VBN settled_VBN in_IN Sussex_NNP ._."
txt.to.words(tagged.text, splitting.rule = "([A-Za-z,.;!]+_ )|[ \n\t]")
tagged.text = "The_DT family_NN of_IN Dashwood_NNP had_VBD long_RB
been_VBN settled_VBN in_IN Sussex_NNP ._."
txt.to.words(tagged.text, splitting.rule = "([A-Za-z,.;!]+ _)|[ \n\t]")
tagged.text = "The_DT family_NN of_IN Dashwood_NNP had_VBD long_RB
been_VBN settled_VBN in_IN Sussex_NNP ._."
txt.to.words(tagged.text, splitting.rule = "[ \n\t]")
install.packages("RTextTools")
doc_matrix = create_matrix(file_input, language = "english", removeNumbers = T, stemWords= T, removeSparseTerms = 0.998)
library(RTextTools)
doc_matrix = create_matrix(file_input, language = "english", removeNumbers = T, stemWords= T, removeSparseTerms = 0.998)
inspect(doc_matrix)
dtm2 <- as.matrix(dtm)
freq <- colSums(as.matrix(dtm))
frequency <- sort(freq, decreasing=TRUE)
frequency
write.csv(dtm2, "matrix.csv", row.names = F)
t = numeric()
t
t = c(a=10, b=11)
t
y = c(a=10, b=11)
merge(t, y, on= row.names)
append(t, y)
y = c(a=10, b=11, c= 19)
t+y
sum(t+y)
c(t,y)
t = data.frame(t)
View(t)
y = data.frame(y)
t+y
View(t)
temp <- cbind(t,y)
temp <- rbind(t,y)
g = data.frame(colnames = c("caca", "us"))
View(g)
t = numeric(a = 10, b = 11, c = 13)
t = numeric(c(a = 10, b = 11, c = 13))
t = numeric()
t = c(a=10, b=11)
t
g = data.frame(freq = t)
View(g)
y = numeric()
y = c(a = 10, b = 45, c = 87, d = 43)
g$freq = g$freq + y
h = data.frame(freq = y)
plyr
library(plyr)
pp <- cbind(names=c(rownames(g), rownames(h),
rbind.fill(list(g, h)))
)
ddply(pp, .(names), function(x) colSums(x[,-1], na.rm = TRUE))
pp <- cbind(names=c(rownames(t), rownames(y),
rbind.fill(list(g, h))))
ddply(pp, .(names), function(x) colSums(x[,-1], na.rm = TRUE))
pp
pp <- cbind(names=c(rownames(t), rownames(y),
rbind.fill(list(t, y))))
pp <- cbind(names=c(rownames(g), rownames(h),
rbind.fill(list(g, h))))
pp
r = append(g,h)
r
r = rbind(g,h)
r
r = cbind(g,h)
?rbind
?merge
ddply(merge(g, h, all.x=TRUE),
.(row.names), summarise, freq=sum(freq))
g$word = row.names
g$word = g$row.names
View(g)
g
t$row.names
t[row.names]
library(data.table)
sapply(t, min)
sapply(t, sum)
sapply(c(t, y), sum)
install.packages("xlsx")
?xlsx
?read.xlsx
?write.xlsx
library(xls)
library(xlsx)
?read.xlsx
t = read.xlsx(file.choose(), sheetIndex = 1)
View(t)
library(transform)
install.packages("transform")
library(jsonlite)
t = read.xlsx(file.choose(), sheetIndex = 1)
View(t)
url = "https://maps.googleapis.com/maps/api/distancematrix/json?origins=San%20Ramon+Alajuela&destinations=Palmares+Alajuela&mode=driving"
document <- fromJSON(txt=url)
seg = document$rows$elements[[1]]$duration$value
library(curl)
install.packages("curl")
library(curl)
document <- fromJSON(txt=url)
seg = document$rows$elements[[1]]$duration$value
seg
seg = document$rows$elements[[1]]
seg
p = read.csv(file.choose())
library(reshape)
install.packages("reshape")
library(reshape)
View(p)
m = melt(p, id = Canton)
m = melt(p, id = CantÃ³n)
p = read.csv(file.choose())
View(p)
m = melt(p, id = Canton)
m = melt(p, id = "Canton")
View(m)
p = read.csv(file.choose())
View(p)
m = melt(p, id = "Canton")
View(m)
names(m) = c("Origen", "Destino", "NumPersonas"
)
View(m)
?gsub
gsub("..",", ",m$Destino)
gsub("..\",", ",m$Destino)
gsub("..\\",", ",m$Destino)
gsub("..",",","Eladio..Montero")
gsub("\..",",","Eladio..Montero")
gsub("\\..",",","Eladio..Montero")
gsub("\\..",", ",m$Destino)
gsub("\\..",", ","San.Jose..San.Jose")
gsub("\\.\\.",", ","San.Jose..San.Jose")
m = gsub("\\.\\.",", ",m$Destino)
m = gsub("\\."," ",m$Destino)
m = gsub("PUNTAREANAS", "PUNTARENAS", m$Destino)
m = melt(p, id = "Canton")
names(m) = c("Origen", "Destino", "NumPersonas")
m$Destino = gsub("\\.\\.",", ",m$Destino)
m$Destino = gsub("\\."," ",m$Destino)
m$Destino = gsub("PUNTAREANAS", "PUNTARENAS", m$Destino)
View(m)
locations = read.xlsx(file.choose())
locations = read.xlsx(file.choose(), sheetIndex = 1)
m[1,1]
m[1,1][[1]]
cantones = read.csv(file.choose(), stringAsFactors = F)
cantones = read.csv(file.choose(), stringsAsFactors = F)
tabla_cantones= melt(cantones, id = "Canton")
names(tabla_cantones) = c("Origen", "Destino", "NumPersonas")
tabla_cantones$Destino = gsub("\\.\\.",", ",tabla_cantones$Destino)
tabla_cantones$Destino = gsub("\\."," ",tabla_cantones$Destino)
tabla_cantones$Destino = gsub("PUNTAREANAS", "PUNTARENAS", tabla_cantones$Destino)
tabla_cantones$Destino = gsub("PUNTAREANAS", "PUNTARENAS", tabla_cantones$Origen)
View(tabla_cantones)
tabla_cantones[1,1]
View(locations)
subset(locations, NOMBRE == tabla_cantones[1,1])
subset(locations, NOMBRE == tabla_cantones[1,1], select = "Location")
data(iris)
summary(iris)
hist(iris$Sepal.Length, iris$Petal.Length)
plot(iris$Sepal.Length, iris$Petal.Length)
plot(iris$Sepal.Length, iris$Petal.Length, color = iris$Species)
?plot
plot(iris)
data = read.csv(file.choose(), stringsAsFactors = F)
view(data)
View(data)
library(caret)
set.seed(3456)
trainIndex <- createDataPartition(data$Made.Donation.in.March.2007, p = .7,
list = FALSE,
times = 1)
training = data[trainIndex,]
test = data[-trainIndex,]
lm?
?lm
plot(training)
modelLinear = lm(Made.Donation.in.March.2007 ~ ., data = training)
modelLinear
modelLinear = lm(Made.Donation.in.March.2007 ~ Months.since.Last.Donation+Number.of.Donations+Total.Volume.Donated..c.c..+Months.since.First.Donation, data = training)
modelLinear
summary(modelLinear)
preProcValues <- preProcess(training, method = c("center", "scale"))
trainTransformed <- predict(preProcValues, training)
View(trainTransformed)
modelLinear = lm(Made.Donation.in.March.2007 ~ Months.since.Last.Donation+Number.of.Donations+Total.Volume.Donated..c.c..+Months.since.First.Donation, data = training)
summary(modelLinear)
comboInfo <- findLinearCombos(training)
comboInfo
training = training[,-comboInfo$remove]
modelLinear = lm(Made.Donation.in.March.2007 ~ Months.since.Last.Donation+Number.of.Donations+Months.since.First.Donation, data = training)
summary(modelLinear)
predicted = predict(modelLinear, training[,-Made.Donation.in.March.2007])
predicted = predict(modelLinear, training[,-5])
predicted
?predict
confusionMatrix(predicted, training$Made.Donation.in.March.2007)
training$Made.Donation.in.March.2007
length(training$Made.Donation.in.March.2007)
length(predicted)
confusionMatrix(predicted, training$Made.Donation.in.March.2007)
class(training$Made.Donation.in.March.2007)
table(predicted)
table(training$Made.Donation.in.March.2007)
class(predicted)
confusionMatrix(predicted, as.numeric(training$Made.Donation.in.March.2007))
confusionMatrix(predicted, training$Made.Donation.in.March.2007)
table(predicted, training$Made.Donation.in.March.2007)
is.factor(training$Made.Donation.in.March.2007)
predicted = predict(modelLinear, training[,-c(1,5)])
predicted
rmse <- function(error)
{
sqrt(mean(error^2))
}
error = training$Made.Donation.in.March.2007 - predicted
rmse(error)
table(factor(predicted, levels=min(test):max(training[,-c(1,5)])),factor(training[,-c(1,5)], levels=min(training[,-c(1,5)]):max(training[,-c(1,5)])))
actual = training$Made.Donation.in.March.2007
confusionMatrix(predicted, actual)
levels(actual)
levels(predicted)
table(predicted, actual)
LogLossBinary = function(actual, predicted, eps = 1e-15) {
predicted = pmin(pmax(predicted, eps), 1-eps)
- (sum(actual * log(predicted) + (1 - actual) * log(1 - predicted))) / length(actual)
}
LogLossBinary(actual, predicted)
training$Avg.Donations = training$Months.since.First.Donation / training$Number.of.Donations
modelLinear = lm(Made.Donation.in.March.2007 ~ Months.since.Last.Donation+Number.of.Donations+Months.since.First.Donation+Avg.Donations, data = training)
View(training)
actual = training$Made.Donation.in.March.2007
LogLossBinary(actual, predicted)
predicted = predict(modelLinear, training[,-c(1,5)])
actual = training$Made.Donation.in.March.2007
LogLossBinary(actual, predicted)
summary.lm(modelLinear)
predicted
(1/(1+exp(-1.1044409624)))
(1/(1+exp(-0.1244084252)))
pred_trans = (1/(1+exp(-predicted)))
summary(pred_trans)
pred_binomial = pred_trans
pred_binomial >= 0.7
pred_binomial
LogLossBinary(actual, predicted = pred_binomial)
?confusionMatrix.sbf
pred_binomial = (pred_binomial >= 0.7) * 1
pred_binomial
table(pred_binomial)
confusionMatrix(actual, pred_binomial)
confusionMatrix(pred_binomial, actual)
table(actual)
pred_binomial = pred_trans
pred_binomial = (pred_binomial >= 0.6) * 1
confusionMatrix(pred_binomial, actual)
preProcValues
trainTransformed
comboInfo <- findLinearCombos(trainTransformed)
comboInfo
training = data[trainIndex,]
test = data[-trainIndex,]
preProcValues <- preProcess(training, method = c("center", "scale"))
trainTransformed <- predict(preProcValues, training)
modelLinear = lm(Made.Donation.in.March.2007 ~ Months.since.Last.Donation+Number.of.Donations+Total.Volume.Donated..c.c..+Months.since.First.Donation, data = training)
# Con esto se encuentran relaciones lineales.
comboInfo <- findLinearCombos(trainTransformed)
comboInfo
View(trainTransformed)
trainTransformed = trainTransformed[,-comboInfo$remove]
modelLinear = lm(Made.Donation.in.March.2007 ~ Months.since.Last.Donation+Number.of.Donations+Months.since.First.Donation, data = trainTransformed)
predicted = predict(modelLinear, trainTransformed[,-c(1,5)])
actual = trainTransformed$Made.Donation.in.March.2007
#Agregar una variable para promedio de donaciones por mes
trainTransformed$Avg.Donations = trainTransformed$Months.since.First.Donation / trainTransformed$Number.of.Donations
modelLinear = lm(Made.Donation.in.March.2007 ~ Months.since.Last.Donation+Number.of.Donations+Months.since.First.Donation+Avg.Donations, data = trainTransformed)
predicted = predict(modelLinear, trainTransformed[,-c(1,5)])
actual = trainTransformed$Made.Donation.in.March.2007
#Hay que transformar las predicciones, para que vayan de un rango de 0 a 1
pred_trans = (1/(1+exp(-predicted)))
pred_binomial = pred_trans
pred_binomial = (pred_binomial >= 0.7) * 1
confusionMatrix(predicted, actual)
pred_binomial
table(pred_binomial)
table(actual)
preProcValues <- preProcess(training[,-5], method = c("center", "scale"))
trainTransformed <- predict(preProcValues, training[,-5])
preProcValues <- preProcess(training[,-6], method = c("center", "scale"))
trainTransformed <- predict(preProcValues, training[,-6])
trainTransformed$Made.Donation.in.March.2007 = training$Made.Donation.in.March.2007
View(training)
View(trainTransformed)
preProcValues <- preProcess(training[,-c(1, 6)], method = c("center", "scale"))
trainTransformed <- predict(preProcValues, training[,-c(1, 6)])
trainTransformed$Made.Donation.in.March.2007 = training$Made.Donation.in.March.2007
comboInfo <- findLinearCombos(trainTransformed)
comboInfo
trainTransformed = trainTransformed[,-comboInfo$remove]
predicted = predict(modelLinear, trainTransformed[,-c(1,5)])
trainTransformed$Avg.Donations = trainTransformed$Months.since.First.Donation / trainTransformed$Number.of.Donations
modelLinear = lm(Made.Donation.in.March.2007 ~ Months.since.Last.Donation+Number.of.Donations+Months.since.First.Donation+Avg.Donations, data = trainTransformed)
predicted = predict(modelLinear, trainTransformed[,-c(5)])
trainTransformed$Avg.Donations = trainTransformed$Months.since.First.Donation / trainTransformed$Number.of.Donations
modelLinear = lm(Made.Donation.in.March.2007 ~ Months.since.Last.Donation+Number.of.Donations+Months.since.First.Donation+Avg.Donations, data = trainTransformed)
predicted = predict(modelLinear, trainTransformed[,-c(5)])
View(trainTransformed)
predicted = predict(modelLinear, trainTransformed[,-c(4)])
actual = trainTransformed$Made.Donation.in.March.2007
actual
table(actual)
pred_trans = (1/(1+exp(-predicted)))
pred_binomial = pred_trans
pred_binomial = (pred_binomial >= 0.7) * 1
confusionMatrix(pred_binomial, actual)
LogLossBinary(actual, predicted = pred_binomial)
LogLossBinary(actual, predicted = pred_trans)
pred_binomial = pred_trans
pred_binomial = (pred_binomial >= 0.6) * 1
confusionMatrix(pred_binomial, actual)
?download.file
carteraFile = download.file("http://grupoincocr.com/incographics/archivosDesyfin/Reporte_Carterizacion.xls", mode = "r")
carteraFile = download.file("http://grupoincocr.com/incographics/archivosDesyfin/Reporte_Carterizacion.xls", "cartera.xls" mode = "r")
carteraFile = download.file("http://grupoincocr.com/incographics/archivosDesyfin/Reporte_Carterizacion.xls", "cartera.xls", mode = "r")
getwd()
carteraFile = download.file("http://grupoincocr.com/incographics/archivosDesyfin/Reporte_Carterizacion.xls", "cartera.xls", mode = "wb")
carteraFile = download.file("http://grupoincocr.com/incographics/archivosDesyfin/Reporte_carterizacion.xls", "cartera.xls", mode = "wb")
RecoveryFile = download.file("http://grupoincocr.com/incographics/archivosDesyfin/Recovery.xls", "recovery.xls", mode = "wb")
library(xlsx)
cartera = read.xlsx("cartera.xls", sheetIndex = 1)
lkfsldfksdf
cartera = read.xlsx("cartera.xls", colIndex = 1, sheetName = "Sheet1")
cartera = read.xlsx("cartera.xls", colIndex = c(5,8,14,33,37,40,42), sheetName = "Sheet1")
recovery = read.xlsx("recovery.xls", sheetIndex = 1)
recovery = read.xlsx2("recovery.xls", sheetIndex = 1)
cartera = read.xlsx2("cartera.xls", sheetName = "Sheet1")
View(recovery)
names(cartera)
names(recovery)
cartera_merged = merge(cartera, recovery, by.x = "OperaciÃ³n", by.y = "IdentificaciÃ³n")
cartera_merged = merge(cartera, recovery, by = "OperaciÃ³n")
cartera_merged2 = merge(cartera, recovery, by.x = "Cod..Cliente", by.y = "IdentificaciÃ³n")
cartera_merged2 = merge(cartera, recovery, by.x = "Cod..Cliente", by.y = "IdentificaciÃ³n", all.x = T)
cartera_merged2 = merge(cartera, recovery, by.x = "Cod..Cliente", by.y = "IdentificaciÃ³n")
?merge
?cbind
cartera_merged2 = merge(cartera, recovery, by.x = "Cod..Cliente", by.y = "IdentificaciÃ³n", all.y = F)
library(sqldf)
install.packages("sqldf")
library(sqldf)
m = sqldf("select * from cartera JOIN recovery USING(OperaciÃ³n)")
m = sqldf("select * from cartera c JOIN recovery r WHERE c.Cod..Cliente = r.IdentificaciÃ³n ")
m = sqldf("select * from cartera c JOIN recovery r WHERE c.[Cod..Cliente] = r.[IdentificaciÃ³n] ")
View(m)
?read.xlsx2
colonesFile = download.file("http://grupoincocr.com/incographics/ftp/ReporteColones.xls", "colones.xls", mode = "wb")
dolaresFile = download.file("http://grupoincocr.com/incographics/ftp/ReporteDolares.xls", "dolares.xls", mode = "wb")
colones = read.xlsx2("colones.xls", sheetIndex = 1, startRow = 8)
dolares = read.xlsx2("dolares.xls", sheetIndex = 1, startRow = 8)
View(colones)
View(dolares)
colones = read.xlsx2("colones.xls", sheetIndex = 1, startRow = 7)
View(colones)
colones = read.xlsx2("colones.xls", sheetIndex = 1)
dolares = read.xlsx2("dolares.xls", sheetIndex = 1)
View(colones)
cartera_merged = merge(cartera, colones, by = "OperaciÃ³n")
cartera_merged_dolares = merge(cartera, dolares, by = "OperaciÃ³n")
m = merge(cartera_merged, cartera_merged_dolares)
m = rbind(cartera_merged, cartera_merged_dolares)
cartera_merged = rbind(merge(cartera, colones, by = "OperaciÃ³n"),
merge(cartera, dolares, by = "OperaciÃ³n"))
m = merge(cartera, colones, by.x = "Cod..Cliente", by.y = "IdentificaciÃ³n")
View(m)
View(subset(m, Cod..Cliente = NULL))
cartera$Cod..Cliente = colones$IdentificaciÃ³n
cartera$Cod..Cliente %in% colones$IdentificaciÃ³n
cartera$Cod..Cliente %in% colones$IdentificaciÃ³n = TRUE
cartera$Cod..Cliente %in% colones$IdentificaciÃ³n == TRUE
sum((cartera$Cod..Cliente %in% colones$IdentificaciÃ³n) * 1)
names(colones)
m = merge(cartera, colones, by.x = "Cod..Cliente", by.y = "IdentificaciÃ³n")
m = merge(cartera, colones, by.x = "Cod..Cliente", by.y = "IdentificaciÃ³n", all = FALSE)
m = merge(cartera, colones, by.x = "OperaciÃ³n", by.y = "OperaciÃ³n")
ard_colones = grep(pattern = "ARD", colones$OperaciÃ³n)
ard_colones = colones[grep(pattern = "ARD", colones$OperaciÃ³n),]
ard_dolares = dolares[grep(pattern = "ARD", dolares$OperaciÃ³n),]
m = merge(cartera, ard_colones, by.x = "Cod..Cliente", by.y = "IdentificaciÃ³n", all = FALSE)
m = merge(cartera, ard_dolares, by.x = "Cod..Cliente", by.y = "IdentificaciÃ³n", all = FALSE)
View(cartera_merged)
cartera_merged = subset(cartera_merged, OperaciÃ³n != "" )
View(cartera_merged)
unique(cartera_merged$DescripciÃ³n.Producto)
cartera_merged$DescripciÃ³n.Producto = gsub(" c/ linea", "", gsub(" s/ linea", "", cartera_merged$DescripciÃ³n.Producto))
unique(cartera_merged$DescripciÃ³n.Producto)
setwd("C:\\Users\\eladiomontero\\Documents\\GitHub\\AnalisisAccidentes")
accidentesData = read.csv("accidentes.csv", stringsAsFactors = F)
setwd("C:\\Users\\eladiomontero\\Documents\\GitHub\\AnalisisAccidentes")
accidentesData = read.table("accidentes.csv", stringsAsFactors = F)
?read.table
accidentesData = read.table("accidentes.csv", stringsAsFactors = F, header = T, sep = ",")
View(accidentesData)
names(accidentesData) = c("a_Accidente","claseDeAccidente","tipoDeAccidente","ano","mes","dia","hora","horaRecodificada","provincia","canton","distrito","gam?","ruta","clasificacionRuta","kilometro","tipoRuta","ruralOUrbano","calzadaVertical","calzadaHorizontal","formaDeCalzada","tipoDeCalzada","condicionDeCalzada","estadoDeCalzada","condicionDeIluminacion","codtie","tipoInterseccion","codigoDeCirculacion","delegacion")
View(accidentesData)
accidentesData = read.table("accidentes.csv", stringsAsFactors = T, header = T, sep = ",")
names(accidentesData) = c("a_Accidente","claseDeAccidente","tipoDeAccidente","ano","mes","dia","hora","horaRecodificada","provincia","canton","distrito","gam?","ruta","clasificacionRuta","kilometro","tipoRuta","ruralOUrbano","calzadaVertical","calzadaHorizontal","formaDeCalzada","tipoDeCalzada","condicionDeCalzada","estadoDeCalzada","condicionDeIluminacion","codtie","tipoInterseccion","codigoDeCirculacion","delegacion")
summary(accidentesData)
accidentesData = read.table("accidentes.csv", stringsAsFactors = F, header = T, sep = ",")
names(accidentesData) = c("a_Accidente","claseDeAccidente","tipoDeAccidente","ano","mes","dia","hora","horaRecodificada","provincia","canton","distrito","gam?","ruta","clasificacionRuta","kilometro","tipoRuta","ruralOUrbano","calzadaVertical","calzadaHorizontal","formaDeCalzada","tipoDeCalzada","condicionDeCalzada","estadoDeCalzada","condicionDeIluminacion","codtie","tipoInterseccion","codigoDeCirculacion","delegacion")
summary(accidentesData)
accidentesData = read.table("accidentes.csv", stringsAsFactors = F, header = T, sep = ",")
names(accidentesData) = c("a_Accidente","claseDeAccidente","tipoDeAccidente","ano","mes","dia","hora","horaRecodificada","provincia","canton","distrito","gam?","ruta","clasificacionRuta","kilometro","tipoRuta","ruralOUrbano","calzadaVertical","calzadaHorizontal","formaDeCalzada","tipoDeCalzada","condicionDeCalzada","estadoDeCalzada","condicionDeIluminacion","codtie","tipoInterseccion","codigoDeCirculacion","delegacion")
summary(accidentesData)
accidentesData = read.table("accidentes.csv", stringsAsFactors = T, header = T, sep = ",")
names(accidentesData) = c("a_Accidente","claseDeAccidente","tipoDeAccidente","ano","mes","dia","hora","horaRecodificada","provincia","canton","distrito","gam?","ruta","clasificacionRuta","kilometro","tipoRuta","ruralOUrbano","calzadaVertical","calzadaHorizontal","formaDeCalzada","tipoDeCalzada","condicionDeCalzada","estadoDeCalzada","condicionDeIluminacion","codtie","tipoInterseccion","codigoDeCirculacion","delegacion")
summary(accidentesData)
as.numeric(accidentesData$claseDeAccidente)
as.numeric(accidentesData$claseDeAccidente) - 1
View(accidentesData)
!as.numeric(accidentesData$claseDeAccidente) - 1
accidentesData$Ilesos = as.numeric(accidentesData$claseDeAccidente) - 1
accidentesData$ilesos = as.numeric(accidentesData$claseDeAccidente) - 1
setwd("C:\\Users\\eladiomontero\\Documents\\GitHub\\AnalisisAccidentes")
accidentesData = read.table("accidentes.csv", stringsAsFactors = T, header = T, sep = ",")
names(accidentesData) = c("a_Accidente","claseDeAccidente","tipoDeAccidente","ano","mes","dia","hora","horaRecodificada","provincia","canton","distrito","gam?","ruta","clasificacionRuta","kilometro","tipoRuta","ruralOUrbano","calzadaVertical","calzadaHorizontal","formaDeCalzada","tipoDeCalzada","condicionDeCalzada","estadoDeCalzada","condicionDeIluminacion","codtie","tipoInterseccion","codigoDeCirculacion","delegacion")
summary(accidentesData)
accidentesData$ilesos = as.numeric(accidentesData$claseDeAccidente) - 1
plot(accidentesData)
plot(accidentesData$ilesos)
plot(accidentesData$claseDeAccidente)
library(caret)
comboInfo = findLinearCombos(accidentesData)
hist(accidentesData$claseDeAccidente,accidentesData$tipoDeAccidente)
hist(accidentesData$claseDeAccidente)
hist(accidentesData$ilesos)
ggplot(accidentesData, claseDeAccidente)
ggplot(accidentesData, accidentesData$claseDeAccidente)
ggplot(accidentesData, aes(x = claseDeAccidente, y = hora, color = ano))
ggplot(accidentesData, aes(x = claseDeAccidente, y = hora, color = ano)) + geom_point()
View(accidentesData)
qplot(dia, hora, data = accidentesData, fill = claseDeAccidente)
qplot(dia, data = accidentesData, geom = hora, fill = claseDeAccidente)
qplot(dia, data = accidentesData, geom = "hora", fill = claseDeAccidente)
qplot(dia, data = accidentesData, geom = "density", fill = claseDeAccidente)
qplot(hora, dia, data = accidentesData, shape = claseDeAccidente, color = claseDeAccidente)
qplot(dia, hora, data = accidentesData, shape = claseDeAccidente, color = claseDeAccidente)
qplot(claseDeAccidente, hora, data = accidentesData, geom = c("boxplot", "jitter"), fill = claseDeAccidente)
qplot(claseDeAccidente, hora, data = accidentesData, geom = c("boxplot", "jitter"), fill = claseDeAccidente)
qplot(claseDeAccidente, hora, data = accidentesData, geom = c("boxplot"), fill = claseDeAccidente)
qplot(claseDeAccidente, hora, data = accidentesData, geom = c("jitter"), fill = claseDeAccidente)
qplot(claseDeAccidente, hora, data = accidentesData, geom = c("bar"), fill = claseDeAccidente)
qplot(claseDeAccidente, hora, data = accidentesData, geom = c("hist"), fill = claseDeAccidente)
qplot(claseDeAccidente, hora, data = accidentesData, geom = c("histogram"), fill = claseDeAccidente)
plot(c(accidentesData$claseDeAccidente, accidentesData$tipoDeAccidente))
qplot(claseDeAccidente, tipoDeAccidente, data = accidentesData)
qplot(claseDeAccidente, fill = tipoDeAccidente, data = accidentesData)
qplot(tipoDeAccidente, fill = claseDeAccidente, data = accidentesData)
qplot(ano, fill = claseDeAccidente, data = accidentesData)
factor(accidentesData$ano)
accidentesData$ano = factor(accidentesData$ano)
qplot(ano, fill = claseDeAccidente, data = accidentesData)
qplot(hora, fill = claseDeAccidente, data = accidentesData)
qplot(tipoDeAccidente, hora, fill = claseDeAccidente, data = accidentesData)
qplot(tipoDeAccidente, hora, fill = claseDeAccidente, data = accidentesData, geom = "bar")
qplot(tipoDeAccidente, hora, fill = claseDeAccidente, data = accidentesData, geom = "bar", stat = "identity")
qplot(mes, hora, fill = claseDeAccidente, data = accidentesData, geom = "bar", stat = "identity")
accidentesData$mes = factor(accidentesData$mes)
model = lm(claseDeAccidente ~ ., data = accidentesData)
trainIndex <- createDataPartition(accidentesData$claseDeAccidente, p = .7,
list = FALSE,
times = 1)
training = accidentesData[trainIndex,]
test = accidentesData[-trainIndex,]
model = lm(claseDeAccidente ~ ., data = training)
model = lm(ilesos ~ ., data = training)
summary(model)
model2 = glm(ilesos, ~ ., data = training, family = "binomial")
View(training)
model2 = glm(training$ilesos, ~ ., data = training, family = "binomial")
sapply(accidentesData, function(x) length(unique(x)))
library(Amelia)
install.packages("Amelia")
library(Amelia)
missmap(accidentesData, main = "Missing values")
m = accidentesData
m[m == "Desconocido"] = NA
View(m)
accidentesData[accidentesData == "Desconocido"] = NA
accidentesData[accidentesData == "Desconocida"] = NA
accidentesData[accidentesData == "Otro o desconocido"] = NA
summary(accidentesData)
accidentesData[accidentesData == "Desconocida"] = NA
View(accidentesData)
contrasts(accidentesData$tipoDeAccidente)
contrasts(accidentesData$claseDeAccidente)
missmap(accidentesData, main = "Missing values")
model = glm(ilesos ~., family = binomial(link = "logit"), data = training)
summary(model)
head(summary(model))
model = glm(ilesos ~., family = binomial(link = "logit"), data = training, maxit = 100)
